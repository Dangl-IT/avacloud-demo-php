<?php
/**
 * ProjectInformationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.3.0
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProjectInformationDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectInformationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectInformationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buyer' => '\Swagger\Client\Model\PartyInformationDto',
        'description' => 'string',
        'description_short' => 'string',
        'name' => 'string',
        'site' => '\Swagger\Client\Model\PartyInformationDto',
        'item_number_schema' => '\Swagger\Client\Model\ItemNumberSchemaDto',
        'currency_short' => 'string',
        'currency_long' => 'string',
        'labour_time_label' => 'string',
        'price_components' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buyer' => null,
        'description' => null,
        'description_short' => null,
        'name' => null,
        'site' => null,
        'item_number_schema' => null,
        'currency_short' => null,
        'currency_long' => null,
        'labour_time_label' => null,
        'price_components' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer' => 'buyer',
        'description' => 'description',
        'description_short' => 'descriptionShort',
        'name' => 'name',
        'site' => 'site',
        'item_number_schema' => 'itemNumberSchema',
        'currency_short' => 'currencyShort',
        'currency_long' => 'currencyLong',
        'labour_time_label' => 'labourTimeLabel',
        'price_components' => 'priceComponents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer' => 'setBuyer',
        'description' => 'setDescription',
        'description_short' => 'setDescriptionShort',
        'name' => 'setName',
        'site' => 'setSite',
        'item_number_schema' => 'setItemNumberSchema',
        'currency_short' => 'setCurrencyShort',
        'currency_long' => 'setCurrencyLong',
        'labour_time_label' => 'setLabourTimeLabel',
        'price_components' => 'setPriceComponents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer' => 'getBuyer',
        'description' => 'getDescription',
        'description_short' => 'getDescriptionShort',
        'name' => 'getName',
        'site' => 'getSite',
        'item_number_schema' => 'getItemNumberSchema',
        'currency_short' => 'getCurrencyShort',
        'currency_long' => 'getCurrencyLong',
        'labour_time_label' => 'getLabourTimeLabel',
        'price_components' => 'getPriceComponents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_short'] = isset($data['description_short']) ? $data['description_short'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['item_number_schema'] = isset($data['item_number_schema']) ? $data['item_number_schema'] : null;
        $this->container['currency_short'] = isset($data['currency_short']) ? $data['currency_short'] : null;
        $this->container['currency_long'] = isset($data['currency_long']) ? $data['currency_long'] : null;
        $this->container['labour_time_label'] = isset($data['labour_time_label']) ? $data['labour_time_label'] : null;
        $this->container['price_components'] = isset($data['price_components']) ? $data['price_components'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets buyer
     *
     * @return \Swagger\Client\Model\PartyInformationDto
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Swagger\Client\Model\PartyInformationDto $buyer buyer
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_short
     *
     * @return string
     */
    public function getDescriptionShort()
    {
        return $this->container['description_short'];
    }

    /**
     * Sets description_short
     *
     * @param string $description_short description_short
     *
     * @return $this
     */
    public function setDescriptionShort($description_short)
    {
        $this->container['description_short'] = $description_short;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Swagger\Client\Model\PartyInformationDto
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Swagger\Client\Model\PartyInformationDto $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets item_number_schema
     *
     * @return \Swagger\Client\Model\ItemNumberSchemaDto
     */
    public function getItemNumberSchema()
    {
        return $this->container['item_number_schema'];
    }

    /**
     * Sets item_number_schema
     *
     * @param \Swagger\Client\Model\ItemNumberSchemaDto $item_number_schema item_number_schema
     *
     * @return $this
     */
    public function setItemNumberSchema($item_number_schema)
    {
        $this->container['item_number_schema'] = $item_number_schema;

        return $this;
    }

    /**
     * Gets currency_short
     *
     * @return string
     */
    public function getCurrencyShort()
    {
        return $this->container['currency_short'];
    }

    /**
     * Sets currency_short
     *
     * @param string $currency_short currency_short
     *
     * @return $this
     */
    public function setCurrencyShort($currency_short)
    {
        $this->container['currency_short'] = $currency_short;

        return $this;
    }

    /**
     * Gets currency_long
     *
     * @return string
     */
    public function getCurrencyLong()
    {
        return $this->container['currency_long'];
    }

    /**
     * Sets currency_long
     *
     * @param string $currency_long currency_long
     *
     * @return $this
     */
    public function setCurrencyLong($currency_long)
    {
        $this->container['currency_long'] = $currency_long;

        return $this;
    }

    /**
     * Gets labour_time_label
     *
     * @return string
     */
    public function getLabourTimeLabel()
    {
        return $this->container['labour_time_label'];
    }

    /**
     * Sets labour_time_label
     *
     * @param string $labour_time_label labour_time_label
     *
     * @return $this
     */
    public function setLabourTimeLabel($labour_time_label)
    {
        $this->container['labour_time_label'] = $labour_time_label;

        return $this;
    }

    /**
     * Gets price_components
     *
     * @return string[]
     */
    public function getPriceComponents()
    {
        return $this->container['price_components'];
    }

    /**
     * Sets price_components
     *
     * @param string[] $price_components price_components
     *
     * @return $this
     */
    public function setPriceComponents($price_components)
    {
        $this->container['price_components'] = $price_components;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


