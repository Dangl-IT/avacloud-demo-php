<?php
/**
 * PositionDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.7.5
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * PositionDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PositionDto extends IElementDto 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PositionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_price' => 'float',
        'unit_price_override' => 'float',
        'quantity' => 'float',
        'quantity_override' => 'float',
        'unit_tag' => 'string',
        'labour_components' => '\Swagger\Client\Model\LabourPriceComponentDto',
        'price_components' => '\Swagger\Client\Model\PriceComponentDto[]',
        'quantity_components' => '\Swagger\Client\Model\CalculationDto[]',
        'sub_descriptions' => '\Swagger\Client\Model\SubDescriptionDto[]',
        'comission_status' => '\Swagger\Client\Model\ComissionStatusDto',
        'complemented_by' => 'string[]',
        'complemented' => 'bool',
        'amount_to_be_entered_by_bidder' => 'bool',
        'price_composition_required' => 'bool',
        'use_different_tax_rate' => 'bool',
        'tax_rate' => 'float',
        'item_number' => '\Swagger\Client\Model\ItemNumberDto',
        'deduction_factor' => 'float',
        'total_price' => 'float',
        'total_price_gross' => 'float',
        'total_price_gross_deducted' => 'float',
        'deducted_price' => 'float',
        'position_type' => '\Swagger\Client\Model\PositionTypeDto',
        'price_type' => '\Swagger\Client\Model\PriceTypeDto',
        'service_type' => '\Swagger\Client\Model\ServiceTypeDto',
        'short_text' => 'string',
        'long_text' => 'string',
        'html_long_text' => 'string',
        'addition_type' => '\Swagger\Client\Model\AdditionTypeDto',
        'element_type' => 'string',
        'quantity_assignments' => '\Swagger\Client\Model\QuantityAssignmentDto[]',
        'commerce_properties' => '\Swagger\Client\Model\CommercePropertiesDto',
        'alternative_to' => 'string',
        'is_lump_sum' => 'bool',
        'repetition_to' => 'string',
        'project_catalogues' => '\Swagger\Client\Model\CatalogueDto[]',
        'catalogue_references' => '\Swagger\Client\Model\CatalogueReferenceDto[]',
        'type' => 'string',
        'standardized_description' => '\Swagger\Client\Model\StandardizedDescriptionDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_price' => 'decimal',
        'unit_price_override' => 'decimal',
        'quantity' => 'decimal',
        'quantity_override' => 'decimal',
        'unit_tag' => null,
        'labour_components' => null,
        'price_components' => null,
        'quantity_components' => null,
        'sub_descriptions' => null,
        'comission_status' => null,
        'complemented_by' => 'guid',
        'complemented' => null,
        'amount_to_be_entered_by_bidder' => null,
        'price_composition_required' => null,
        'use_different_tax_rate' => null,
        'tax_rate' => 'decimal',
        'item_number' => null,
        'deduction_factor' => 'decimal',
        'total_price' => 'decimal',
        'total_price_gross' => 'decimal',
        'total_price_gross_deducted' => 'decimal',
        'deducted_price' => 'decimal',
        'position_type' => null,
        'price_type' => null,
        'service_type' => null,
        'short_text' => null,
        'long_text' => null,
        'html_long_text' => null,
        'addition_type' => null,
        'element_type' => null,
        'quantity_assignments' => null,
        'commerce_properties' => null,
        'alternative_to' => 'guid',
        'is_lump_sum' => null,
        'repetition_to' => 'guid',
        'project_catalogues' => null,
        'catalogue_references' => null,
        'type' => null,
        'standardized_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_price' => 'unitPrice',
        'unit_price_override' => 'unitPriceOverride',
        'quantity' => 'quantity',
        'quantity_override' => 'quantityOverride',
        'unit_tag' => 'unitTag',
        'labour_components' => 'labourComponents',
        'price_components' => 'priceComponents',
        'quantity_components' => 'quantityComponents',
        'sub_descriptions' => 'subDescriptions',
        'comission_status' => 'comissionStatus',
        'complemented_by' => 'complementedBy',
        'complemented' => 'complemented',
        'amount_to_be_entered_by_bidder' => 'amountToBeEnteredByBidder',
        'price_composition_required' => 'priceCompositionRequired',
        'use_different_tax_rate' => 'useDifferentTaxRate',
        'tax_rate' => 'taxRate',
        'item_number' => 'itemNumber',
        'deduction_factor' => 'deductionFactor',
        'total_price' => 'totalPrice',
        'total_price_gross' => 'totalPriceGross',
        'total_price_gross_deducted' => 'totalPriceGrossDeducted',
        'deducted_price' => 'deductedPrice',
        'position_type' => 'positionType',
        'price_type' => 'priceType',
        'service_type' => 'serviceType',
        'short_text' => 'shortText',
        'long_text' => 'longText',
        'html_long_text' => 'htmlLongText',
        'addition_type' => 'additionType',
        'element_type' => 'elementType',
        'quantity_assignments' => 'quantityAssignments',
        'commerce_properties' => 'commerceProperties',
        'alternative_to' => 'alternativeTo',
        'is_lump_sum' => 'isLumpSum',
        'repetition_to' => 'repetitionTo',
        'project_catalogues' => 'projectCatalogues',
        'catalogue_references' => 'catalogueReferences',
        'type' => 'type',
        'standardized_description' => 'standardizedDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_price' => 'setUnitPrice',
        'unit_price_override' => 'setUnitPriceOverride',
        'quantity' => 'setQuantity',
        'quantity_override' => 'setQuantityOverride',
        'unit_tag' => 'setUnitTag',
        'labour_components' => 'setLabourComponents',
        'price_components' => 'setPriceComponents',
        'quantity_components' => 'setQuantityComponents',
        'sub_descriptions' => 'setSubDescriptions',
        'comission_status' => 'setComissionStatus',
        'complemented_by' => 'setComplementedBy',
        'complemented' => 'setComplemented',
        'amount_to_be_entered_by_bidder' => 'setAmountToBeEnteredByBidder',
        'price_composition_required' => 'setPriceCompositionRequired',
        'use_different_tax_rate' => 'setUseDifferentTaxRate',
        'tax_rate' => 'setTaxRate',
        'item_number' => 'setItemNumber',
        'deduction_factor' => 'setDeductionFactor',
        'total_price' => 'setTotalPrice',
        'total_price_gross' => 'setTotalPriceGross',
        'total_price_gross_deducted' => 'setTotalPriceGrossDeducted',
        'deducted_price' => 'setDeductedPrice',
        'position_type' => 'setPositionType',
        'price_type' => 'setPriceType',
        'service_type' => 'setServiceType',
        'short_text' => 'setShortText',
        'long_text' => 'setLongText',
        'html_long_text' => 'setHtmlLongText',
        'addition_type' => 'setAdditionType',
        'element_type' => 'setElementType',
        'quantity_assignments' => 'setQuantityAssignments',
        'commerce_properties' => 'setCommerceProperties',
        'alternative_to' => 'setAlternativeTo',
        'is_lump_sum' => 'setIsLumpSum',
        'repetition_to' => 'setRepetitionTo',
        'project_catalogues' => 'setProjectCatalogues',
        'catalogue_references' => 'setCatalogueReferences',
        'type' => 'setType',
        'standardized_description' => 'setStandardizedDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_price' => 'getUnitPrice',
        'unit_price_override' => 'getUnitPriceOverride',
        'quantity' => 'getQuantity',
        'quantity_override' => 'getQuantityOverride',
        'unit_tag' => 'getUnitTag',
        'labour_components' => 'getLabourComponents',
        'price_components' => 'getPriceComponents',
        'quantity_components' => 'getQuantityComponents',
        'sub_descriptions' => 'getSubDescriptions',
        'comission_status' => 'getComissionStatus',
        'complemented_by' => 'getComplementedBy',
        'complemented' => 'getComplemented',
        'amount_to_be_entered_by_bidder' => 'getAmountToBeEnteredByBidder',
        'price_composition_required' => 'getPriceCompositionRequired',
        'use_different_tax_rate' => 'getUseDifferentTaxRate',
        'tax_rate' => 'getTaxRate',
        'item_number' => 'getItemNumber',
        'deduction_factor' => 'getDeductionFactor',
        'total_price' => 'getTotalPrice',
        'total_price_gross' => 'getTotalPriceGross',
        'total_price_gross_deducted' => 'getTotalPriceGrossDeducted',
        'deducted_price' => 'getDeductedPrice',
        'position_type' => 'getPositionType',
        'price_type' => 'getPriceType',
        'service_type' => 'getServiceType',
        'short_text' => 'getShortText',
        'long_text' => 'getLongText',
        'html_long_text' => 'getHtmlLongText',
        'addition_type' => 'getAdditionType',
        'element_type' => 'getElementType',
        'quantity_assignments' => 'getQuantityAssignments',
        'commerce_properties' => 'getCommerceProperties',
        'alternative_to' => 'getAlternativeTo',
        'is_lump_sum' => 'getIsLumpSum',
        'repetition_to' => 'getRepetitionTo',
        'project_catalogues' => 'getProjectCatalogues',
        'catalogue_references' => 'getCatalogueReferences',
        'type' => 'getType',
        'standardized_description' => 'getStandardizedDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_price_override'] = isset($data['unit_price_override']) ? $data['unit_price_override'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_override'] = isset($data['quantity_override']) ? $data['quantity_override'] : null;
        $this->container['unit_tag'] = isset($data['unit_tag']) ? $data['unit_tag'] : null;
        $this->container['labour_components'] = isset($data['labour_components']) ? $data['labour_components'] : null;
        $this->container['price_components'] = isset($data['price_components']) ? $data['price_components'] : null;
        $this->container['quantity_components'] = isset($data['quantity_components']) ? $data['quantity_components'] : null;
        $this->container['sub_descriptions'] = isset($data['sub_descriptions']) ? $data['sub_descriptions'] : null;
        $this->container['comission_status'] = isset($data['comission_status']) ? $data['comission_status'] : null;
        $this->container['complemented_by'] = isset($data['complemented_by']) ? $data['complemented_by'] : null;
        $this->container['complemented'] = isset($data['complemented']) ? $data['complemented'] : null;
        $this->container['amount_to_be_entered_by_bidder'] = isset($data['amount_to_be_entered_by_bidder']) ? $data['amount_to_be_entered_by_bidder'] : null;
        $this->container['price_composition_required'] = isset($data['price_composition_required']) ? $data['price_composition_required'] : null;
        $this->container['use_different_tax_rate'] = isset($data['use_different_tax_rate']) ? $data['use_different_tax_rate'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['deduction_factor'] = isset($data['deduction_factor']) ? $data['deduction_factor'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['total_price_gross'] = isset($data['total_price_gross']) ? $data['total_price_gross'] : null;
        $this->container['total_price_gross_deducted'] = isset($data['total_price_gross_deducted']) ? $data['total_price_gross_deducted'] : null;
        $this->container['deducted_price'] = isset($data['deducted_price']) ? $data['deducted_price'] : null;
        $this->container['position_type'] = isset($data['position_type']) ? $data['position_type'] : null;
        $this->container['price_type'] = isset($data['price_type']) ? $data['price_type'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['short_text'] = isset($data['short_text']) ? $data['short_text'] : null;
        $this->container['long_text'] = isset($data['long_text']) ? $data['long_text'] : null;
        $this->container['html_long_text'] = isset($data['html_long_text']) ? $data['html_long_text'] : null;
        $this->container['addition_type'] = isset($data['addition_type']) ? $data['addition_type'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : null;
        $this->container['quantity_assignments'] = isset($data['quantity_assignments']) ? $data['quantity_assignments'] : null;
        $this->container['commerce_properties'] = isset($data['commerce_properties']) ? $data['commerce_properties'] : null;
        $this->container['alternative_to'] = isset($data['alternative_to']) ? $data['alternative_to'] : null;
        $this->container['is_lump_sum'] = isset($data['is_lump_sum']) ? $data['is_lump_sum'] : null;
        $this->container['repetition_to'] = isset($data['repetition_to']) ? $data['repetition_to'] : null;
        $this->container['project_catalogues'] = isset($data['project_catalogues']) ? $data['project_catalogues'] : null;
        $this->container['catalogue_references'] = isset($data['catalogue_references']) ? $data['catalogue_references'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['standardized_description'] = isset($data['standardized_description']) ? $data['standardized_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['comission_status'] === null) {
            $invalidProperties[] = "'comission_status' can't be null";
        }
        if ($this->container['complemented'] === null) {
            $invalidProperties[] = "'complemented' can't be null";
        }
        if ($this->container['amount_to_be_entered_by_bidder'] === null) {
            $invalidProperties[] = "'amount_to_be_entered_by_bidder' can't be null";
        }
        if ($this->container['price_composition_required'] === null) {
            $invalidProperties[] = "'price_composition_required' can't be null";
        }
        if ($this->container['use_different_tax_rate'] === null) {
            $invalidProperties[] = "'use_different_tax_rate' can't be null";
        }
        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if ($this->container['deduction_factor'] === null) {
            $invalidProperties[] = "'deduction_factor' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['total_price_gross'] === null) {
            $invalidProperties[] = "'total_price_gross' can't be null";
        }
        if ($this->container['total_price_gross_deducted'] === null) {
            $invalidProperties[] = "'total_price_gross_deducted' can't be null";
        }
        if ($this->container['deducted_price'] === null) {
            $invalidProperties[] = "'deducted_price' can't be null";
        }
        if ($this->container['position_type'] === null) {
            $invalidProperties[] = "'position_type' can't be null";
        }
        if ($this->container['price_type'] === null) {
            $invalidProperties[] = "'price_type' can't be null";
        }
        if ($this->container['service_type'] === null) {
            $invalidProperties[] = "'service_type' can't be null";
        }
        if ($this->container['addition_type'] === null) {
            $invalidProperties[] = "'addition_type' can't be null";
        }
        if ($this->container['is_lump_sum'] === null) {
            $invalidProperties[] = "'is_lump_sum' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_price
     *
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float $unit_price Will return the price per unit, rounded according to the project settings or the default value of three decimal places
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_override
     *
     * @return float
     */
    public function getUnitPriceOverride()
    {
        return $this->container['unit_price_override'];
    }

    /**
     * Sets unit_price_override
     *
     * @param float $unit_price_override You can use this property to directly set the unit price for this position. This will override any given PriceComponents
     *
     * @return $this
     */
    public function setUnitPriceOverride($unit_price_override)
    {
        $this->container['unit_price_override'] = $unit_price_override;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity Will return this Position's total quantity, rounded to three decimal places.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_override
     *
     * @return float
     */
    public function getQuantityOverride()
    {
        return $this->container['quantity_override'];
    }

    /**
     * Sets quantity_override
     *
     * @param float $quantity_override You can use this property to directly set the quantity for this position. This will override any given QuantityComponents
     *
     * @return $this
     */
    public function setQuantityOverride($quantity_override)
    {
        $this->container['quantity_override'] = $quantity_override;

        return $this;
    }

    /**
     * Gets unit_tag
     *
     * @return string
     */
    public function getUnitTag()
    {
        return $this->container['unit_tag'];
    }

    /**
     * Sets unit_tag
     *
     * @param string $unit_tag The tag of the unit used for this positions quantity.
     *
     * @return $this
     */
    public function setUnitTag($unit_tag)
    {
        $this->container['unit_tag'] = $unit_tag;

        return $this;
    }

    /**
     * Gets labour_components
     *
     * @return \Swagger\Client\Model\LabourPriceComponentDto
     */
    public function getLabourComponents()
    {
        return $this->container['labour_components'];
    }

    /**
     * Sets labour_components
     *
     * @param \Swagger\Client\Model\LabourPriceComponentDto $labour_components The components for labour time in this Position.
     *
     * @return $this
     */
    public function setLabourComponents($labour_components)
    {
        $this->container['labour_components'] = $labour_components;

        return $this;
    }

    /**
     * Gets price_components
     *
     * @return \Swagger\Client\Model\PriceComponentDto[]
     */
    public function getPriceComponents()
    {
        return $this->container['price_components'];
    }

    /**
     * Sets price_components
     *
     * @param \Swagger\Client\Model\PriceComponentDto[] $price_components The single price components in this Position. Price components should not be handled directly on a per-position basis but set globally in the parent Projects ProjectInformation.
     *
     * @return $this
     */
    public function setPriceComponents($price_components)
    {
        $this->container['price_components'] = $price_components;

        return $this;
    }

    /**
     * Gets quantity_components
     *
     * @return \Swagger\Client\Model\CalculationDto[]
     */
    public function getQuantityComponents()
    {
        return $this->container['quantity_components'];
    }

    /**
     * Sets quantity_components
     *
     * @param \Swagger\Client\Model\CalculationDto[] $quantity_components The quantity components of this Position.
     *
     * @return $this
     */
    public function setQuantityComponents($quantity_components)
    {
        $this->container['quantity_components'] = $quantity_components;

        return $this;
    }

    /**
     * Gets sub_descriptions
     *
     * @return \Swagger\Client\Model\SubDescriptionDto[]
     */
    public function getSubDescriptions()
    {
        return $this->container['sub_descriptions'];
    }

    /**
     * Sets sub_descriptions
     *
     * @param \Swagger\Client\Model\SubDescriptionDto[] $sub_descriptions Further structuring of this Position.
     *
     * @return $this
     */
    public function setSubDescriptions($sub_descriptions)
    {
        $this->container['sub_descriptions'] = $sub_descriptions;

        return $this;
    }

    /**
     * Gets comission_status
     *
     * @return \Swagger\Client\Model\ComissionStatusDto
     */
    public function getComissionStatus()
    {
        return $this->container['comission_status'];
    }

    /**
     * Sets comission_status
     *
     * @param \Swagger\Client\Model\ComissionStatusDto $comission_status Indicates the status of this Position's comission.
     *
     * @return $this
     */
    public function setComissionStatus($comission_status)
    {
        $this->container['comission_status'] = $comission_status;

        return $this;
    }

    /**
     * Gets complemented_by
     *
     * @return string[]
     */
    public function getComplementedBy()
    {
        return $this->container['complemented_by'];
    }

    /**
     * Sets complemented_by
     *
     * @param string[] $complemented_by A list of positions that complement this Position. The positions are referenced by their GUIDs.
     *
     * @return $this
     */
    public function setComplementedBy($complemented_by)
    {
        $this->container['complemented_by'] = $complemented_by;

        return $this;
    }

    /**
     * Gets complemented
     *
     * @return bool
     */
    public function getComplemented()
    {
        return $this->container['complemented'];
    }

    /**
     * Sets complemented
     *
     * @param bool $complemented Will indicate if this Position is complemented in this ServiceSpecification by other Positions.
     *
     * @return $this
     */
    public function setComplemented($complemented)
    {
        $this->container['complemented'] = $complemented;

        return $this;
    }

    /**
     * Gets amount_to_be_entered_by_bidder
     *
     * @return bool
     */
    public function getAmountToBeEnteredByBidder()
    {
        return $this->container['amount_to_be_entered_by_bidder'];
    }

    /**
     * Sets amount_to_be_entered_by_bidder
     *
     * @param bool $amount_to_be_entered_by_bidder Indicates that the amount for this Position is to be set by the bidder.
     *
     * @return $this
     */
    public function setAmountToBeEnteredByBidder($amount_to_be_entered_by_bidder)
    {
        $this->container['amount_to_be_entered_by_bidder'] = $amount_to_be_entered_by_bidder;

        return $this;
    }

    /**
     * Gets price_composition_required
     *
     * @return bool
     */
    public function getPriceCompositionRequired()
    {
        return $this->container['price_composition_required'];
    }

    /**
     * Sets price_composition_required
     *
     * @param bool $price_composition_required Indicates if the bidder demands for prices to be broken up into their price components.
     *
     * @return $this
     */
    public function setPriceCompositionRequired($price_composition_required)
    {
        $this->container['price_composition_required'] = $price_composition_required;

        return $this;
    }

    /**
     * Gets use_different_tax_rate
     *
     * @return bool
     */
    public function getUseDifferentTaxRate()
    {
        return $this->container['use_different_tax_rate'];
    }

    /**
     * Sets use_different_tax_rate
     *
     * @param bool $use_different_tax_rate Indicates if this Position should use a different TaxRate than what is the default for the Project.
     *
     * @return $this
     */
    public function setUseDifferentTaxRate($use_different_tax_rate)
    {
        $this->container['use_different_tax_rate'] = $use_different_tax_rate;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate Will return either the parent ServiceSpecification's TaxRate or it's own if it has a different value. (For example, in Germany Water has a different TaxRate than regular Positions)
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return \Swagger\Client\Model\ItemNumberDto
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param \Swagger\Client\Model\ItemNumberDto $item_number The ItemNumber for this Position.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets deduction_factor
     *
     * @return float
     */
    public function getDeductionFactor()
    {
        return $this->container['deduction_factor'];
    }

    /**
     * Sets deduction_factor
     *
     * @param float $deduction_factor The rate of deductions, i.e. 0.12m means 12% price deduction.
     *
     * @return $this
     */
    public function setDeductionFactor($deduction_factor)
    {
        $this->container['deduction_factor'] = $deduction_factor;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price Returns the product of UnitPrice times Quantity.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_price_gross
     *
     * @return float
     */
    public function getTotalPriceGross()
    {
        return $this->container['total_price_gross'];
    }

    /**
     * Sets total_price_gross
     *
     * @param float $total_price_gross The total gross price for this Position.
     *
     * @return $this
     */
    public function setTotalPriceGross($total_price_gross)
    {
        $this->container['total_price_gross'] = $total_price_gross;

        return $this;
    }

    /**
     * Gets total_price_gross_deducted
     *
     * @return float
     */
    public function getTotalPriceGrossDeducted()
    {
        return $this->container['total_price_gross_deducted'];
    }

    /**
     * Sets total_price_gross_deducted
     *
     * @param float $total_price_gross_deducted Total gross price after applied deductions.
     *
     * @return $this
     */
    public function setTotalPriceGrossDeducted($total_price_gross_deducted)
    {
        $this->container['total_price_gross_deducted'] = $total_price_gross_deducted;

        return $this;
    }

    /**
     * Gets deducted_price
     *
     * @return float
     */
    public function getDeductedPrice()
    {
        return $this->container['deducted_price'];
    }

    /**
     * Sets deducted_price
     *
     * @param float $deducted_price Net price after applied deductions.
     *
     * @return $this
     */
    public function setDeductedPrice($deducted_price)
    {
        $this->container['deducted_price'] = $deducted_price;

        return $this;
    }

    /**
     * Gets position_type
     *
     * @return \Swagger\Client\Model\PositionTypeDto
     */
    public function getPositionType()
    {
        return $this->container['position_type'];
    }

    /**
     * Sets position_type
     *
     * @param \Swagger\Client\Model\PositionTypeDto $position_type This indicates the type of a position. If this is an alternative position, its AlternativeTo property should be set to the id of the position it can replace.
     *
     * @return $this
     */
    public function setPositionType($position_type)
    {
        $this->container['position_type'] = $position_type;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \Swagger\Client\Model\PriceTypeDto
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \Swagger\Client\Model\PriceTypeDto $price_type Indicates the PriceType of this Position.
     *
     * @return $this
     */
    public function setPriceType($price_type)
    {
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return \Swagger\Client\Model\ServiceTypeDto
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param \Swagger\Client\Model\ServiceTypeDto $service_type This indicates if this position is regular or describing a labour / hourly paid work service
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets short_text
     *
     * @return string
     */
    public function getShortText()
    {
        return $this->container['short_text'];
    }

    /**
     * Sets short_text
     *
     * @param string $short_text Short description for this DescriptionBase element.
     *
     * @return $this
     */
    public function setShortText($short_text)
    {
        $this->container['short_text'] = $short_text;

        return $this;
    }

    /**
     * Gets long_text
     *
     * @return string
     */
    public function getLongText()
    {
        return $this->container['long_text'];
    }

    /**
     * Sets long_text
     *
     * @param string $long_text Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
     *
     * @return $this
     */
    public function setLongText($long_text)
    {
        $this->container['long_text'] = $long_text;

        return $this;
    }

    /**
     * Gets html_long_text
     *
     * @return string
     */
    public function getHtmlLongText()
    {
        return $this->container['html_long_text'];
    }

    /**
     * Sets html_long_text
     *
     * @param string $html_long_text This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
     *
     * @return $this
     */
    public function setHtmlLongText($html_long_text)
    {
        $this->container['html_long_text'] = $html_long_text;

        return $this;
    }

    /**
     * Gets addition_type
     *
     * @return \Swagger\Client\Model\AdditionTypeDto
     */
    public function getAdditionType()
    {
        return $this->container['addition_type'];
    }

    /**
     * Sets addition_type
     *
     * @param \Swagger\Client\Model\AdditionTypeDto $addition_type Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.
     *
     * @return $this
     */
    public function setAdditionType($addition_type)
    {
        $this->container['addition_type'] = $addition_type;

        return $this;
    }

    /**
     * Gets element_type
     *
     * @return string
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     *
     * @param string $element_type element_type
     *
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }

    /**
     * Gets quantity_assignments
     *
     * @return \Swagger\Client\Model\QuantityAssignmentDto[]
     */
    public function getQuantityAssignments()
    {
        return $this->container['quantity_assignments'];
    }

    /**
     * Sets quantity_assignments
     *
     * @param \Swagger\Client\Model\QuantityAssignmentDto[] $quantity_assignments Quantity assignments are, in contrast to SubDescriptions, used to categorize parts of this Position. For example, it could be categorized by cost group - e.g. a Position describing concrete walls could follow the German DIN 276 Cost Groups Standard and specify that of the total 1.000m² wall, 500m² are classified as exterior walls and 500m² are classified as interior walls. They would then have different cost groups associated, e.g. for accounting purposes.
     *
     * @return $this
     */
    public function setQuantityAssignments($quantity_assignments)
    {
        $this->container['quantity_assignments'] = $quantity_assignments;

        return $this;
    }

    /**
     * Gets commerce_properties
     *
     * @return \Swagger\Client\Model\CommercePropertiesDto
     */
    public function getCommerceProperties()
    {
        return $this->container['commerce_properties'];
    }

    /**
     * Sets commerce_properties
     *
     * @param \Swagger\Client\Model\CommercePropertiesDto $commerce_properties The CommerceProperties support specialized information that is only useful in GAEB XML 9x data exchange phases. It is intended to provide article information.
     *
     * @return $this
     */
    public function setCommerceProperties($commerce_properties)
    {
        $this->container['commerce_properties'] = $commerce_properties;

        return $this;
    }

    /**
     * Gets alternative_to
     *
     * @return string
     */
    public function getAlternativeTo()
    {
        return $this->container['alternative_to'];
    }

    /**
     * Sets alternative_to
     *
     * @param string $alternative_to If this position is an Alternative, then this property should point to the id of the position in this service specification that it can replace.
     *
     * @return $this
     */
    public function setAlternativeTo($alternative_to)
    {
        $this->container['alternative_to'] = $alternative_to;

        return $this;
    }

    /**
     * Gets is_lump_sum
     *
     * @return bool
     */
    public function getIsLumpSum()
    {
        return $this->container['is_lump_sum'];
    }

    /**
     * Sets is_lump_sum
     *
     * @param bool $is_lump_sum If this is true, it indicates that the position is intended to be a lump sum, \"Pauschal\" in German. This means the position total price that is being invoiced should not depend on the actual quantity. In practice, partial invoices are still often used for partial services rendered. This property does not affect the price calculation for this position. Typically, the Quantity should be set to 1.0 when this flag is used.
     *
     * @return $this
     */
    public function setIsLumpSum($is_lump_sum)
    {
        $this->container['is_lump_sum'] = $is_lump_sum;

        return $this;
    }

    /**
     * Gets repetition_to
     *
     * @return string
     */
    public function getRepetitionTo()
    {
        return $this->container['repetition_to'];
    }

    /**
     * Sets repetition_to
     *
     * @param string $repetition_to This identifier can be used to point to the Id of a position in the same ServiceSpecification that acts as a base position. It matches \"Bezugsposition\" in GAEB. This can be used for positions that repeat partially or are linked together
     *
     * @return $this
     */
    public function setRepetitionTo($repetition_to)
    {
        $this->container['repetition_to'] = $repetition_to;

        return $this;
    }

    /**
     * Gets project_catalogues
     *
     * @return \Swagger\Client\Model\CatalogueDto[]
     */
    public function getProjectCatalogues()
    {
        return $this->container['project_catalogues'];
    }

    /**
     * Sets project_catalogues
     *
     * @param \Swagger\Client\Model\CatalogueDto[] $project_catalogues These are Catalogues that are used within this Position. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.
     *
     * @return $this
     */
    public function setProjectCatalogues($project_catalogues)
    {
        $this->container['project_catalogues'] = $project_catalogues;

        return $this;
    }

    /**
     * Gets catalogue_references
     *
     * @return \Swagger\Client\Model\CatalogueReferenceDto[]
     */
    public function getCatalogueReferences()
    {
        return $this->container['catalogue_references'];
    }

    /**
     * Sets catalogue_references
     *
     * @param \Swagger\Client\Model\CatalogueReferenceDto[] $catalogue_references Referenced catalogues for this Position.
     *
     * @return $this
     */
    public function setCatalogueReferences($catalogue_references)
    {
        $this->container['catalogue_references'] = $catalogue_references;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets standardized_description
     *
     * @return \Swagger\Client\Model\StandardizedDescriptionDto
     */
    public function getStandardizedDescription()
    {
        return $this->container['standardized_description'];
    }

    /**
     * Sets standardized_description
     *
     * @param \Swagger\Client\Model\StandardizedDescriptionDto $standardized_description This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
     *
     * @return $this
     */
    public function setStandardizedDescription($standardized_description)
    {
        $this->container['standardized_description'] = $standardized_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


