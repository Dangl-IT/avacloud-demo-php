<?php
/**
 * ServiceSpecificationGroupDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.3.0
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ServiceSpecificationGroupDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceSpecificationGroupDto extends IElementDto 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceSpecificationGroupDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project_hourly_wage' => 'float',
        'project_tax_rate' => 'float',
        'project_price_components' => 'string[]',
        'project_item_number_schema' => '\Swagger\Client\Model\ItemNumberSchemaDto',
        'elements' => '\Swagger\Client\Model\IElementDto[]',
        'project_labour_time_label' => 'string',
        'contains_duplicate_item_numbers' => 'bool',
        'ignore_duplicate_item_numbers' => 'bool',
        'total_price_gross_by_tax_rate' => '\Swagger\Client\Model\GrossPriceComponentDto[]',
        'ignore_child_price_updates' => 'bool',
        'deducted_price' => 'float',
        'deduction_factor' => 'float',
        'total_price' => 'float',
        'total_price_gross' => 'float',
        'total_price_gross_deducted' => 'float',
        'type' => '\Swagger\Client\Model\PriceTypeDto',
        'short_text' => 'string',
        'comission_status' => '\Swagger\Client\Model\ComissionStatusDto',
        'item_number' => '\Swagger\Client\Model\ItemNumberDto',
        'element_type' => 'string',
        'is_lot' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project_hourly_wage' => 'decimal',
        'project_tax_rate' => 'decimal',
        'project_price_components' => null,
        'project_item_number_schema' => null,
        'elements' => null,
        'project_labour_time_label' => null,
        'contains_duplicate_item_numbers' => null,
        'ignore_duplicate_item_numbers' => null,
        'total_price_gross_by_tax_rate' => null,
        'ignore_child_price_updates' => null,
        'deducted_price' => 'decimal',
        'deduction_factor' => 'decimal',
        'total_price' => 'decimal',
        'total_price_gross' => 'decimal',
        'total_price_gross_deducted' => 'decimal',
        'type' => null,
        'short_text' => null,
        'comission_status' => null,
        'item_number' => null,
        'element_type' => null,
        'is_lot' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_hourly_wage' => 'projectHourlyWage',
        'project_tax_rate' => 'projectTaxRate',
        'project_price_components' => 'projectPriceComponents',
        'project_item_number_schema' => 'projectItemNumberSchema',
        'elements' => 'elements',
        'project_labour_time_label' => 'projectLabourTimeLabel',
        'contains_duplicate_item_numbers' => 'containsDuplicateItemNumbers',
        'ignore_duplicate_item_numbers' => 'ignoreDuplicateItemNumbers',
        'total_price_gross_by_tax_rate' => 'totalPriceGrossByTaxRate',
        'ignore_child_price_updates' => 'ignoreChildPriceUpdates',
        'deducted_price' => 'deductedPrice',
        'deduction_factor' => 'deductionFactor',
        'total_price' => 'totalPrice',
        'total_price_gross' => 'totalPriceGross',
        'total_price_gross_deducted' => 'totalPriceGrossDeducted',
        'type' => 'type',
        'short_text' => 'shortText',
        'comission_status' => 'comissionStatus',
        'item_number' => 'itemNumber',
        'element_type' => 'elementType',
        'is_lot' => 'isLot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_hourly_wage' => 'setProjectHourlyWage',
        'project_tax_rate' => 'setProjectTaxRate',
        'project_price_components' => 'setProjectPriceComponents',
        'project_item_number_schema' => 'setProjectItemNumberSchema',
        'elements' => 'setElements',
        'project_labour_time_label' => 'setProjectLabourTimeLabel',
        'contains_duplicate_item_numbers' => 'setContainsDuplicateItemNumbers',
        'ignore_duplicate_item_numbers' => 'setIgnoreDuplicateItemNumbers',
        'total_price_gross_by_tax_rate' => 'setTotalPriceGrossByTaxRate',
        'ignore_child_price_updates' => 'setIgnoreChildPriceUpdates',
        'deducted_price' => 'setDeductedPrice',
        'deduction_factor' => 'setDeductionFactor',
        'total_price' => 'setTotalPrice',
        'total_price_gross' => 'setTotalPriceGross',
        'total_price_gross_deducted' => 'setTotalPriceGrossDeducted',
        'type' => 'setType',
        'short_text' => 'setShortText',
        'comission_status' => 'setComissionStatus',
        'item_number' => 'setItemNumber',
        'element_type' => 'setElementType',
        'is_lot' => 'setIsLot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_hourly_wage' => 'getProjectHourlyWage',
        'project_tax_rate' => 'getProjectTaxRate',
        'project_price_components' => 'getProjectPriceComponents',
        'project_item_number_schema' => 'getProjectItemNumberSchema',
        'elements' => 'getElements',
        'project_labour_time_label' => 'getProjectLabourTimeLabel',
        'contains_duplicate_item_numbers' => 'getContainsDuplicateItemNumbers',
        'ignore_duplicate_item_numbers' => 'getIgnoreDuplicateItemNumbers',
        'total_price_gross_by_tax_rate' => 'getTotalPriceGrossByTaxRate',
        'ignore_child_price_updates' => 'getIgnoreChildPriceUpdates',
        'deducted_price' => 'getDeductedPrice',
        'deduction_factor' => 'getDeductionFactor',
        'total_price' => 'getTotalPrice',
        'total_price_gross' => 'getTotalPriceGross',
        'total_price_gross_deducted' => 'getTotalPriceGrossDeducted',
        'type' => 'getType',
        'short_text' => 'getShortText',
        'comission_status' => 'getComissionStatus',
        'item_number' => 'getItemNumber',
        'element_type' => 'getElementType',
        'is_lot' => 'getIsLot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['project_hourly_wage'] = isset($data['project_hourly_wage']) ? $data['project_hourly_wage'] : null;
        $this->container['project_tax_rate'] = isset($data['project_tax_rate']) ? $data['project_tax_rate'] : null;
        $this->container['project_price_components'] = isset($data['project_price_components']) ? $data['project_price_components'] : null;
        $this->container['project_item_number_schema'] = isset($data['project_item_number_schema']) ? $data['project_item_number_schema'] : null;
        $this->container['elements'] = isset($data['elements']) ? $data['elements'] : null;
        $this->container['project_labour_time_label'] = isset($data['project_labour_time_label']) ? $data['project_labour_time_label'] : null;
        $this->container['contains_duplicate_item_numbers'] = isset($data['contains_duplicate_item_numbers']) ? $data['contains_duplicate_item_numbers'] : null;
        $this->container['ignore_duplicate_item_numbers'] = isset($data['ignore_duplicate_item_numbers']) ? $data['ignore_duplicate_item_numbers'] : null;
        $this->container['total_price_gross_by_tax_rate'] = isset($data['total_price_gross_by_tax_rate']) ? $data['total_price_gross_by_tax_rate'] : null;
        $this->container['ignore_child_price_updates'] = isset($data['ignore_child_price_updates']) ? $data['ignore_child_price_updates'] : null;
        $this->container['deducted_price'] = isset($data['deducted_price']) ? $data['deducted_price'] : null;
        $this->container['deduction_factor'] = isset($data['deduction_factor']) ? $data['deduction_factor'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['total_price_gross'] = isset($data['total_price_gross']) ? $data['total_price_gross'] : null;
        $this->container['total_price_gross_deducted'] = isset($data['total_price_gross_deducted']) ? $data['total_price_gross_deducted'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['short_text'] = isset($data['short_text']) ? $data['short_text'] : null;
        $this->container['comission_status'] = isset($data['comission_status']) ? $data['comission_status'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : null;
        $this->container['is_lot'] = isset($data['is_lot']) ? $data['is_lot'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['project_hourly_wage'] === null) {
            $invalidProperties[] = "'project_hourly_wage' can't be null";
        }
        if ($this->container['project_tax_rate'] === null) {
            $invalidProperties[] = "'project_tax_rate' can't be null";
        }
        if ($this->container['contains_duplicate_item_numbers'] === null) {
            $invalidProperties[] = "'contains_duplicate_item_numbers' can't be null";
        }
        if ($this->container['ignore_duplicate_item_numbers'] === null) {
            $invalidProperties[] = "'ignore_duplicate_item_numbers' can't be null";
        }
        if ($this->container['ignore_child_price_updates'] === null) {
            $invalidProperties[] = "'ignore_child_price_updates' can't be null";
        }
        if ($this->container['deducted_price'] === null) {
            $invalidProperties[] = "'deducted_price' can't be null";
        }
        if ($this->container['deduction_factor'] === null) {
            $invalidProperties[] = "'deduction_factor' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['total_price_gross'] === null) {
            $invalidProperties[] = "'total_price_gross' can't be null";
        }
        if ($this->container['total_price_gross_deducted'] === null) {
            $invalidProperties[] = "'total_price_gross_deducted' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['comission_status'] === null) {
            $invalidProperties[] = "'comission_status' can't be null";
        }
        if ($this->container['is_lot'] === null) {
            $invalidProperties[] = "'is_lot' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        if ($this->container['project_hourly_wage'] === null) {
            return false;
        }
        if ($this->container['project_tax_rate'] === null) {
            return false;
        }
        if ($this->container['contains_duplicate_item_numbers'] === null) {
            return false;
        }
        if ($this->container['ignore_duplicate_item_numbers'] === null) {
            return false;
        }
        if ($this->container['ignore_child_price_updates'] === null) {
            return false;
        }
        if ($this->container['deducted_price'] === null) {
            return false;
        }
        if ($this->container['deduction_factor'] === null) {
            return false;
        }
        if ($this->container['total_price'] === null) {
            return false;
        }
        if ($this->container['total_price_gross'] === null) {
            return false;
        }
        if ($this->container['total_price_gross_deducted'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['comission_status'] === null) {
            return false;
        }
        if ($this->container['is_lot'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets project_hourly_wage
     *
     * @return float
     */
    public function getProjectHourlyWage()
    {
        return $this->container['project_hourly_wage'];
    }

    /**
     * Sets project_hourly_wage
     *
     * @param float $project_hourly_wage project_hourly_wage
     *
     * @return $this
     */
    public function setProjectHourlyWage($project_hourly_wage)
    {
        $this->container['project_hourly_wage'] = $project_hourly_wage;

        return $this;
    }

    /**
     * Gets project_tax_rate
     *
     * @return float
     */
    public function getProjectTaxRate()
    {
        return $this->container['project_tax_rate'];
    }

    /**
     * Sets project_tax_rate
     *
     * @param float $project_tax_rate project_tax_rate
     *
     * @return $this
     */
    public function setProjectTaxRate($project_tax_rate)
    {
        $this->container['project_tax_rate'] = $project_tax_rate;

        return $this;
    }

    /**
     * Gets project_price_components
     *
     * @return string[]
     */
    public function getProjectPriceComponents()
    {
        return $this->container['project_price_components'];
    }

    /**
     * Sets project_price_components
     *
     * @param string[] $project_price_components project_price_components
     *
     * @return $this
     */
    public function setProjectPriceComponents($project_price_components)
    {
        $this->container['project_price_components'] = $project_price_components;

        return $this;
    }

    /**
     * Gets project_item_number_schema
     *
     * @return \Swagger\Client\Model\ItemNumberSchemaDto
     */
    public function getProjectItemNumberSchema()
    {
        return $this->container['project_item_number_schema'];
    }

    /**
     * Sets project_item_number_schema
     *
     * @param \Swagger\Client\Model\ItemNumberSchemaDto $project_item_number_schema project_item_number_schema
     *
     * @return $this
     */
    public function setProjectItemNumberSchema($project_item_number_schema)
    {
        $this->container['project_item_number_schema'] = $project_item_number_schema;

        return $this;
    }

    /**
     * Gets elements
     *
     * @return \Swagger\Client\Model\IElementDto[]
     */
    public function getElements()
    {
        return $this->container['elements'];
    }

    /**
     * Sets elements
     *
     * @param \Swagger\Client\Model\IElementDto[] $elements elements
     *
     * @return $this
     */
    public function setElements($elements)
    {
        $this->container['elements'] = $elements;

        return $this;
    }

    /**
     * Gets project_labour_time_label
     *
     * @return string
     */
    public function getProjectLabourTimeLabel()
    {
        return $this->container['project_labour_time_label'];
    }

    /**
     * Sets project_labour_time_label
     *
     * @param string $project_labour_time_label project_labour_time_label
     *
     * @return $this
     */
    public function setProjectLabourTimeLabel($project_labour_time_label)
    {
        $this->container['project_labour_time_label'] = $project_labour_time_label;

        return $this;
    }

    /**
     * Gets contains_duplicate_item_numbers
     *
     * @return bool
     */
    public function getContainsDuplicateItemNumbers()
    {
        return $this->container['contains_duplicate_item_numbers'];
    }

    /**
     * Sets contains_duplicate_item_numbers
     *
     * @param bool $contains_duplicate_item_numbers contains_duplicate_item_numbers
     *
     * @return $this
     */
    public function setContainsDuplicateItemNumbers($contains_duplicate_item_numbers)
    {
        $this->container['contains_duplicate_item_numbers'] = $contains_duplicate_item_numbers;

        return $this;
    }

    /**
     * Gets ignore_duplicate_item_numbers
     *
     * @return bool
     */
    public function getIgnoreDuplicateItemNumbers()
    {
        return $this->container['ignore_duplicate_item_numbers'];
    }

    /**
     * Sets ignore_duplicate_item_numbers
     *
     * @param bool $ignore_duplicate_item_numbers ignore_duplicate_item_numbers
     *
     * @return $this
     */
    public function setIgnoreDuplicateItemNumbers($ignore_duplicate_item_numbers)
    {
        $this->container['ignore_duplicate_item_numbers'] = $ignore_duplicate_item_numbers;

        return $this;
    }

    /**
     * Gets total_price_gross_by_tax_rate
     *
     * @return \Swagger\Client\Model\GrossPriceComponentDto[]
     */
    public function getTotalPriceGrossByTaxRate()
    {
        return $this->container['total_price_gross_by_tax_rate'];
    }

    /**
     * Sets total_price_gross_by_tax_rate
     *
     * @param \Swagger\Client\Model\GrossPriceComponentDto[] $total_price_gross_by_tax_rate total_price_gross_by_tax_rate
     *
     * @return $this
     */
    public function setTotalPriceGrossByTaxRate($total_price_gross_by_tax_rate)
    {
        $this->container['total_price_gross_by_tax_rate'] = $total_price_gross_by_tax_rate;

        return $this;
    }

    /**
     * Gets ignore_child_price_updates
     *
     * @return bool
     */
    public function getIgnoreChildPriceUpdates()
    {
        return $this->container['ignore_child_price_updates'];
    }

    /**
     * Sets ignore_child_price_updates
     *
     * @param bool $ignore_child_price_updates ignore_child_price_updates
     *
     * @return $this
     */
    public function setIgnoreChildPriceUpdates($ignore_child_price_updates)
    {
        $this->container['ignore_child_price_updates'] = $ignore_child_price_updates;

        return $this;
    }

    /**
     * Gets deducted_price
     *
     * @return float
     */
    public function getDeductedPrice()
    {
        return $this->container['deducted_price'];
    }

    /**
     * Sets deducted_price
     *
     * @param float $deducted_price deducted_price
     *
     * @return $this
     */
    public function setDeductedPrice($deducted_price)
    {
        $this->container['deducted_price'] = $deducted_price;

        return $this;
    }

    /**
     * Gets deduction_factor
     *
     * @return float
     */
    public function getDeductionFactor()
    {
        return $this->container['deduction_factor'];
    }

    /**
     * Sets deduction_factor
     *
     * @param float $deduction_factor deduction_factor
     *
     * @return $this
     */
    public function setDeductionFactor($deduction_factor)
    {
        $this->container['deduction_factor'] = $deduction_factor;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_price_gross
     *
     * @return float
     */
    public function getTotalPriceGross()
    {
        return $this->container['total_price_gross'];
    }

    /**
     * Sets total_price_gross
     *
     * @param float $total_price_gross total_price_gross
     *
     * @return $this
     */
    public function setTotalPriceGross($total_price_gross)
    {
        $this->container['total_price_gross'] = $total_price_gross;

        return $this;
    }

    /**
     * Gets total_price_gross_deducted
     *
     * @return float
     */
    public function getTotalPriceGrossDeducted()
    {
        return $this->container['total_price_gross_deducted'];
    }

    /**
     * Sets total_price_gross_deducted
     *
     * @param float $total_price_gross_deducted total_price_gross_deducted
     *
     * @return $this
     */
    public function setTotalPriceGrossDeducted($total_price_gross_deducted)
    {
        $this->container['total_price_gross_deducted'] = $total_price_gross_deducted;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\PriceTypeDto
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\PriceTypeDto $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets short_text
     *
     * @return string
     */
    public function getShortText()
    {
        return $this->container['short_text'];
    }

    /**
     * Sets short_text
     *
     * @param string $short_text short_text
     *
     * @return $this
     */
    public function setShortText($short_text)
    {
        $this->container['short_text'] = $short_text;

        return $this;
    }

    /**
     * Gets comission_status
     *
     * @return \Swagger\Client\Model\ComissionStatusDto
     */
    public function getComissionStatus()
    {
        return $this->container['comission_status'];
    }

    /**
     * Sets comission_status
     *
     * @param \Swagger\Client\Model\ComissionStatusDto $comission_status comission_status
     *
     * @return $this
     */
    public function setComissionStatus($comission_status)
    {
        $this->container['comission_status'] = $comission_status;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return \Swagger\Client\Model\ItemNumberDto
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param \Swagger\Client\Model\ItemNumberDto $item_number item_number
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets element_type
     *
     * @return string
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     *
     * @param string $element_type element_type
     *
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }

    /**
     * Gets is_lot
     *
     * @return bool
     */
    public function getIsLot()
    {
        return $this->container['is_lot'];
    }

    /**
     * Sets is_lot
     *
     * @param bool $is_lot is_lot
     *
     * @return $this
     */
    public function setIsLot($is_lot)
    {
        $this->container['is_lot'] = $is_lot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


