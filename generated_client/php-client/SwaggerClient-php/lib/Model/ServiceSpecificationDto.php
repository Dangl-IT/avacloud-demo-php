<?php
/**
 * ServiceSpecificationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.7.5
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServiceSpecificationDto Class Doc Comment
 *
 * @category Class
 * @description This is the base class that holds information about a whole service specification.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceSpecificationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceSpecificationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'project_hourly_wage' => 'float',
        'project_tax_rate' => 'float',
        'project_price_components' => 'string[]',
        'project_item_number_schema' => '\Swagger\Client\Model\ItemNumberSchemaDto',
        'elements' => '\Swagger\Client\Model\IElementDto[]',
        'project_labour_time_label' => 'string',
        'contains_duplicate_item_numbers' => 'bool',
        'ignore_duplicate_item_numbers' => 'bool',
        'total_price_gross_by_tax_rate' => '\Swagger\Client\Model\GrossPriceComponentDto[]',
        'ignore_child_price_updates' => 'bool',
        'deducted_price' => 'float',
        'deduction_factor' => 'float',
        'total_price' => 'float',
        'total_price_gross' => 'float',
        'total_price_gross_deducted' => 'float',
        'price_type' => '\Swagger\Client\Model\PriceTypeDto',
        'bidder' => '\Swagger\Client\Model\PartyInformationDto',
        'bidder_discriminator' => 'string',
        'gaeb_xml_id' => 'string',
        'project_information' => '\Swagger\Client\Model\ProjectInformationDto',
        'exchange_phase' => '\Swagger\Client\Model\ExchangePhaseDto',
        'origin' => '\Swagger\Client\Model\OriginDto',
        'creation_date' => '\DateTime',
        'offer_by_date' => '\DateTime',
        'decision_date' => '\DateTime',
        'submission_location' => 'string',
        'description' => 'string',
        'name' => 'string',
        'price_information' => '\Swagger\Client\Model\PriceInformationDto',
        'project_catalogues' => '\Swagger\Client\Model\CatalogueDto[]',
        'planned_execution_start' => '\DateTime',
        'planned_execution_end' => '\DateTime',
        'contract_date' => '\DateTime',
        'contract_identifier' => 'string',
        'warranty_duration' => '\Swagger\Client\Model\WarrantyDurationDto',
        'warranty_end' => '\DateTime',
        'approval_date' => '\DateTime',
        'type_of_approval' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'guid',
        'project_hourly_wage' => 'decimal',
        'project_tax_rate' => 'decimal',
        'project_price_components' => null,
        'project_item_number_schema' => null,
        'elements' => null,
        'project_labour_time_label' => null,
        'contains_duplicate_item_numbers' => null,
        'ignore_duplicate_item_numbers' => null,
        'total_price_gross_by_tax_rate' => null,
        'ignore_child_price_updates' => null,
        'deducted_price' => 'decimal',
        'deduction_factor' => 'decimal',
        'total_price' => 'decimal',
        'total_price_gross' => 'decimal',
        'total_price_gross_deducted' => 'decimal',
        'price_type' => null,
        'bidder' => null,
        'bidder_discriminator' => null,
        'gaeb_xml_id' => null,
        'project_information' => null,
        'exchange_phase' => null,
        'origin' => null,
        'creation_date' => 'date-time',
        'offer_by_date' => 'date-time',
        'decision_date' => 'date-time',
        'submission_location' => null,
        'description' => null,
        'name' => null,
        'price_information' => null,
        'project_catalogues' => null,
        'planned_execution_start' => 'date-time',
        'planned_execution_end' => 'date-time',
        'contract_date' => 'date-time',
        'contract_identifier' => null,
        'warranty_duration' => null,
        'warranty_end' => 'date-time',
        'approval_date' => 'date-time',
        'type_of_approval' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'project_hourly_wage' => 'projectHourlyWage',
        'project_tax_rate' => 'projectTaxRate',
        'project_price_components' => 'projectPriceComponents',
        'project_item_number_schema' => 'projectItemNumberSchema',
        'elements' => 'elements',
        'project_labour_time_label' => 'projectLabourTimeLabel',
        'contains_duplicate_item_numbers' => 'containsDuplicateItemNumbers',
        'ignore_duplicate_item_numbers' => 'ignoreDuplicateItemNumbers',
        'total_price_gross_by_tax_rate' => 'totalPriceGrossByTaxRate',
        'ignore_child_price_updates' => 'ignoreChildPriceUpdates',
        'deducted_price' => 'deductedPrice',
        'deduction_factor' => 'deductionFactor',
        'total_price' => 'totalPrice',
        'total_price_gross' => 'totalPriceGross',
        'total_price_gross_deducted' => 'totalPriceGrossDeducted',
        'price_type' => 'priceType',
        'bidder' => 'bidder',
        'bidder_discriminator' => 'bidderDiscriminator',
        'gaeb_xml_id' => 'gaebXmlId',
        'project_information' => 'projectInformation',
        'exchange_phase' => 'exchangePhase',
        'origin' => 'origin',
        'creation_date' => 'creationDate',
        'offer_by_date' => 'offerByDate',
        'decision_date' => 'decisionDate',
        'submission_location' => 'submissionLocation',
        'description' => 'description',
        'name' => 'name',
        'price_information' => 'priceInformation',
        'project_catalogues' => 'projectCatalogues',
        'planned_execution_start' => 'plannedExecutionStart',
        'planned_execution_end' => 'plannedExecutionEnd',
        'contract_date' => 'contractDate',
        'contract_identifier' => 'contractIdentifier',
        'warranty_duration' => 'warrantyDuration',
        'warranty_end' => 'warrantyEnd',
        'approval_date' => 'approvalDate',
        'type_of_approval' => 'typeOfApproval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'project_hourly_wage' => 'setProjectHourlyWage',
        'project_tax_rate' => 'setProjectTaxRate',
        'project_price_components' => 'setProjectPriceComponents',
        'project_item_number_schema' => 'setProjectItemNumberSchema',
        'elements' => 'setElements',
        'project_labour_time_label' => 'setProjectLabourTimeLabel',
        'contains_duplicate_item_numbers' => 'setContainsDuplicateItemNumbers',
        'ignore_duplicate_item_numbers' => 'setIgnoreDuplicateItemNumbers',
        'total_price_gross_by_tax_rate' => 'setTotalPriceGrossByTaxRate',
        'ignore_child_price_updates' => 'setIgnoreChildPriceUpdates',
        'deducted_price' => 'setDeductedPrice',
        'deduction_factor' => 'setDeductionFactor',
        'total_price' => 'setTotalPrice',
        'total_price_gross' => 'setTotalPriceGross',
        'total_price_gross_deducted' => 'setTotalPriceGrossDeducted',
        'price_type' => 'setPriceType',
        'bidder' => 'setBidder',
        'bidder_discriminator' => 'setBidderDiscriminator',
        'gaeb_xml_id' => 'setGaebXmlId',
        'project_information' => 'setProjectInformation',
        'exchange_phase' => 'setExchangePhase',
        'origin' => 'setOrigin',
        'creation_date' => 'setCreationDate',
        'offer_by_date' => 'setOfferByDate',
        'decision_date' => 'setDecisionDate',
        'submission_location' => 'setSubmissionLocation',
        'description' => 'setDescription',
        'name' => 'setName',
        'price_information' => 'setPriceInformation',
        'project_catalogues' => 'setProjectCatalogues',
        'planned_execution_start' => 'setPlannedExecutionStart',
        'planned_execution_end' => 'setPlannedExecutionEnd',
        'contract_date' => 'setContractDate',
        'contract_identifier' => 'setContractIdentifier',
        'warranty_duration' => 'setWarrantyDuration',
        'warranty_end' => 'setWarrantyEnd',
        'approval_date' => 'setApprovalDate',
        'type_of_approval' => 'setTypeOfApproval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'project_hourly_wage' => 'getProjectHourlyWage',
        'project_tax_rate' => 'getProjectTaxRate',
        'project_price_components' => 'getProjectPriceComponents',
        'project_item_number_schema' => 'getProjectItemNumberSchema',
        'elements' => 'getElements',
        'project_labour_time_label' => 'getProjectLabourTimeLabel',
        'contains_duplicate_item_numbers' => 'getContainsDuplicateItemNumbers',
        'ignore_duplicate_item_numbers' => 'getIgnoreDuplicateItemNumbers',
        'total_price_gross_by_tax_rate' => 'getTotalPriceGrossByTaxRate',
        'ignore_child_price_updates' => 'getIgnoreChildPriceUpdates',
        'deducted_price' => 'getDeductedPrice',
        'deduction_factor' => 'getDeductionFactor',
        'total_price' => 'getTotalPrice',
        'total_price_gross' => 'getTotalPriceGross',
        'total_price_gross_deducted' => 'getTotalPriceGrossDeducted',
        'price_type' => 'getPriceType',
        'bidder' => 'getBidder',
        'bidder_discriminator' => 'getBidderDiscriminator',
        'gaeb_xml_id' => 'getGaebXmlId',
        'project_information' => 'getProjectInformation',
        'exchange_phase' => 'getExchangePhase',
        'origin' => 'getOrigin',
        'creation_date' => 'getCreationDate',
        'offer_by_date' => 'getOfferByDate',
        'decision_date' => 'getDecisionDate',
        'submission_location' => 'getSubmissionLocation',
        'description' => 'getDescription',
        'name' => 'getName',
        'price_information' => 'getPriceInformation',
        'project_catalogues' => 'getProjectCatalogues',
        'planned_execution_start' => 'getPlannedExecutionStart',
        'planned_execution_end' => 'getPlannedExecutionEnd',
        'contract_date' => 'getContractDate',
        'contract_identifier' => 'getContractIdentifier',
        'warranty_duration' => 'getWarrantyDuration',
        'warranty_end' => 'getWarrantyEnd',
        'approval_date' => 'getApprovalDate',
        'type_of_approval' => 'getTypeOfApproval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project_hourly_wage'] = isset($data['project_hourly_wage']) ? $data['project_hourly_wage'] : null;
        $this->container['project_tax_rate'] = isset($data['project_tax_rate']) ? $data['project_tax_rate'] : null;
        $this->container['project_price_components'] = isset($data['project_price_components']) ? $data['project_price_components'] : null;
        $this->container['project_item_number_schema'] = isset($data['project_item_number_schema']) ? $data['project_item_number_schema'] : null;
        $this->container['elements'] = isset($data['elements']) ? $data['elements'] : null;
        $this->container['project_labour_time_label'] = isset($data['project_labour_time_label']) ? $data['project_labour_time_label'] : null;
        $this->container['contains_duplicate_item_numbers'] = isset($data['contains_duplicate_item_numbers']) ? $data['contains_duplicate_item_numbers'] : null;
        $this->container['ignore_duplicate_item_numbers'] = isset($data['ignore_duplicate_item_numbers']) ? $data['ignore_duplicate_item_numbers'] : null;
        $this->container['total_price_gross_by_tax_rate'] = isset($data['total_price_gross_by_tax_rate']) ? $data['total_price_gross_by_tax_rate'] : null;
        $this->container['ignore_child_price_updates'] = isset($data['ignore_child_price_updates']) ? $data['ignore_child_price_updates'] : null;
        $this->container['deducted_price'] = isset($data['deducted_price']) ? $data['deducted_price'] : null;
        $this->container['deduction_factor'] = isset($data['deduction_factor']) ? $data['deduction_factor'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['total_price_gross'] = isset($data['total_price_gross']) ? $data['total_price_gross'] : null;
        $this->container['total_price_gross_deducted'] = isset($data['total_price_gross_deducted']) ? $data['total_price_gross_deducted'] : null;
        $this->container['price_type'] = isset($data['price_type']) ? $data['price_type'] : null;
        $this->container['bidder'] = isset($data['bidder']) ? $data['bidder'] : null;
        $this->container['bidder_discriminator'] = isset($data['bidder_discriminator']) ? $data['bidder_discriminator'] : null;
        $this->container['gaeb_xml_id'] = isset($data['gaeb_xml_id']) ? $data['gaeb_xml_id'] : null;
        $this->container['project_information'] = isset($data['project_information']) ? $data['project_information'] : null;
        $this->container['exchange_phase'] = isset($data['exchange_phase']) ? $data['exchange_phase'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['offer_by_date'] = isset($data['offer_by_date']) ? $data['offer_by_date'] : null;
        $this->container['decision_date'] = isset($data['decision_date']) ? $data['decision_date'] : null;
        $this->container['submission_location'] = isset($data['submission_location']) ? $data['submission_location'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['price_information'] = isset($data['price_information']) ? $data['price_information'] : null;
        $this->container['project_catalogues'] = isset($data['project_catalogues']) ? $data['project_catalogues'] : null;
        $this->container['planned_execution_start'] = isset($data['planned_execution_start']) ? $data['planned_execution_start'] : null;
        $this->container['planned_execution_end'] = isset($data['planned_execution_end']) ? $data['planned_execution_end'] : null;
        $this->container['contract_date'] = isset($data['contract_date']) ? $data['contract_date'] : null;
        $this->container['contract_identifier'] = isset($data['contract_identifier']) ? $data['contract_identifier'] : null;
        $this->container['warranty_duration'] = isset($data['warranty_duration']) ? $data['warranty_duration'] : null;
        $this->container['warranty_end'] = isset($data['warranty_end']) ? $data['warranty_end'] : null;
        $this->container['approval_date'] = isset($data['approval_date']) ? $data['approval_date'] : null;
        $this->container['type_of_approval'] = isset($data['type_of_approval']) ? $data['type_of_approval'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['project_hourly_wage'] === null) {
            $invalidProperties[] = "'project_hourly_wage' can't be null";
        }
        if ($this->container['project_tax_rate'] === null) {
            $invalidProperties[] = "'project_tax_rate' can't be null";
        }
        if ($this->container['contains_duplicate_item_numbers'] === null) {
            $invalidProperties[] = "'contains_duplicate_item_numbers' can't be null";
        }
        if ($this->container['ignore_duplicate_item_numbers'] === null) {
            $invalidProperties[] = "'ignore_duplicate_item_numbers' can't be null";
        }
        if ($this->container['ignore_child_price_updates'] === null) {
            $invalidProperties[] = "'ignore_child_price_updates' can't be null";
        }
        if ($this->container['deducted_price'] === null) {
            $invalidProperties[] = "'deducted_price' can't be null";
        }
        if ($this->container['deduction_factor'] === null) {
            $invalidProperties[] = "'deduction_factor' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['total_price_gross'] === null) {
            $invalidProperties[] = "'total_price_gross' can't be null";
        }
        if ($this->container['total_price_gross_deducted'] === null) {
            $invalidProperties[] = "'total_price_gross_deducted' can't be null";
        }
        if ($this->container['price_type'] === null) {
            $invalidProperties[] = "'price_type' can't be null";
        }
        if ($this->container['exchange_phase'] === null) {
            $invalidProperties[] = "'exchange_phase' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        if ($this->container['offer_by_date'] === null) {
            $invalidProperties[] = "'offer_by_date' can't be null";
        }
        if ($this->container['decision_date'] === null) {
            $invalidProperties[] = "'decision_date' can't be null";
        }
        if ($this->container['planned_execution_start'] === null) {
            $invalidProperties[] = "'planned_execution_start' can't be null";
        }
        if ($this->container['planned_execution_end'] === null) {
            $invalidProperties[] = "'planned_execution_end' can't be null";
        }
        if ($this->container['contract_date'] === null) {
            $invalidProperties[] = "'contract_date' can't be null";
        }
        if ($this->container['warranty_end'] === null) {
            $invalidProperties[] = "'warranty_end' can't be null";
        }
        if ($this->container['approval_date'] === null) {
            $invalidProperties[] = "'approval_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Elements GUID identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_hourly_wage
     *
     * @return float
     */
    public function getProjectHourlyWage()
    {
        return $this->container['project_hourly_wage'];
    }

    /**
     * Sets project_hourly_wage
     *
     * @param float $project_hourly_wage The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.
     *
     * @return $this
     */
    public function setProjectHourlyWage($project_hourly_wage)
    {
        $this->container['project_hourly_wage'] = $project_hourly_wage;

        return $this;
    }

    /**
     * Gets project_tax_rate
     *
     * @return float
     */
    public function getProjectTaxRate()
    {
        return $this->container['project_tax_rate'];
    }

    /**
     * Sets project_tax_rate
     *
     * @param float $project_tax_rate The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.
     *
     * @return $this
     */
    public function setProjectTaxRate($project_tax_rate)
    {
        $this->container['project_tax_rate'] = $project_tax_rate;

        return $this;
    }

    /**
     * Gets project_price_components
     *
     * @return string[]
     */
    public function getProjectPriceComponents()
    {
        return $this->container['project_price_components'];
    }

    /**
     * Sets project_price_components
     *
     * @param string[] $project_price_components The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.
     *
     * @return $this
     */
    public function setProjectPriceComponents($project_price_components)
    {
        $this->container['project_price_components'] = $project_price_components;

        return $this;
    }

    /**
     * Gets project_item_number_schema
     *
     * @return \Swagger\Client\Model\ItemNumberSchemaDto
     */
    public function getProjectItemNumberSchema()
    {
        return $this->container['project_item_number_schema'];
    }

    /**
     * Sets project_item_number_schema
     *
     * @param \Swagger\Client\Model\ItemNumberSchemaDto $project_item_number_schema The ItemNumberSchema that is used within this project.
     *
     * @return $this
     */
    public function setProjectItemNumberSchema($project_item_number_schema)
    {
        $this->container['project_item_number_schema'] = $project_item_number_schema;

        return $this;
    }

    /**
     * Gets elements
     *
     * @return \Swagger\Client\Model\IElementDto[]
     */
    public function getElements()
    {
        return $this->container['elements'];
    }

    /**
     * Sets elements
     *
     * @param \Swagger\Client\Model\IElementDto[] $elements The IElements within this ElementContainerBase.
     *
     * @return $this
     */
    public function setElements($elements)
    {
        $this->container['elements'] = $elements;

        return $this;
    }

    /**
     * Gets project_labour_time_label
     *
     * @return string
     */
    public function getProjectLabourTimeLabel()
    {
        return $this->container['project_labour_time_label'];
    }

    /**
     * Sets project_labour_time_label
     *
     * @param string $project_labour_time_label The label used in the parent Project to mark labour time, e.g. \"Hours\" or \"Stunden\".
     *
     * @return $this
     */
    public function setProjectLabourTimeLabel($project_labour_time_label)
    {
        $this->container['project_labour_time_label'] = $project_labour_time_label;

        return $this;
    }

    /**
     * Gets contains_duplicate_item_numbers
     *
     * @return bool
     */
    public function getContainsDuplicateItemNumbers()
    {
        return $this->container['contains_duplicate_item_numbers'];
    }

    /**
     * Sets contains_duplicate_item_numbers
     *
     * @param bool $contains_duplicate_item_numbers Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.
     *
     * @return $this
     */
    public function setContainsDuplicateItemNumbers($contains_duplicate_item_numbers)
    {
        $this->container['contains_duplicate_item_numbers'] = $contains_duplicate_item_numbers;

        return $this;
    }

    /**
     * Gets ignore_duplicate_item_numbers
     *
     * @return bool
     */
    public function getIgnoreDuplicateItemNumbers()
    {
        return $this->container['ignore_duplicate_item_numbers'];
    }

    /**
     * Sets ignore_duplicate_item_numbers
     *
     * @param bool $ignore_duplicate_item_numbers Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.
     *
     * @return $this
     */
    public function setIgnoreDuplicateItemNumbers($ignore_duplicate_item_numbers)
    {
        $this->container['ignore_duplicate_item_numbers'] = $ignore_duplicate_item_numbers;

        return $this;
    }

    /**
     * Gets total_price_gross_by_tax_rate
     *
     * @return \Swagger\Client\Model\GrossPriceComponentDto[]
     */
    public function getTotalPriceGrossByTaxRate()
    {
        return $this->container['total_price_gross_by_tax_rate'];
    }

    /**
     * Sets total_price_gross_by_tax_rate
     *
     * @param \Swagger\Client\Model\GrossPriceComponentDto[] $total_price_gross_by_tax_rate Price composition by tax rate.
     *
     * @return $this
     */
    public function setTotalPriceGrossByTaxRate($total_price_gross_by_tax_rate)
    {
        $this->container['total_price_gross_by_tax_rate'] = $total_price_gross_by_tax_rate;

        return $this;
    }

    /**
     * Gets ignore_child_price_updates
     *
     * @return bool
     */
    public function getIgnoreChildPriceUpdates()
    {
        return $this->container['ignore_child_price_updates'];
    }

    /**
     * Sets ignore_child_price_updates
     *
     * @param bool $ignore_child_price_updates Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.
     *
     * @return $this
     */
    public function setIgnoreChildPriceUpdates($ignore_child_price_updates)
    {
        $this->container['ignore_child_price_updates'] = $ignore_child_price_updates;

        return $this;
    }

    /**
     * Gets deducted_price
     *
     * @return float
     */
    public function getDeductedPrice()
    {
        return $this->container['deducted_price'];
    }

    /**
     * Sets deducted_price
     *
     * @param float $deducted_price Net price after applied deductions.
     *
     * @return $this
     */
    public function setDeductedPrice($deducted_price)
    {
        $this->container['deducted_price'] = $deducted_price;

        return $this;
    }

    /**
     * Gets deduction_factor
     *
     * @return float
     */
    public function getDeductionFactor()
    {
        return $this->container['deduction_factor'];
    }

    /**
     * Sets deduction_factor
     *
     * @param float $deduction_factor Factor of applied deductions to the total price. For example, \"0.03\" means that a 3% deduction is to be applied.
     *
     * @return $this
     */
    public function setDeductionFactor($deduction_factor)
    {
        $this->container['deduction_factor'] = $deduction_factor;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price Will return this ElementContainerBase's total price.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_price_gross
     *
     * @return float
     */
    public function getTotalPriceGross()
    {
        return $this->container['total_price_gross'];
    }

    /**
     * Sets total_price_gross
     *
     * @param float $total_price_gross The total gross price for this ElementContainerBase including all child elements.
     *
     * @return $this
     */
    public function setTotalPriceGross($total_price_gross)
    {
        $this->container['total_price_gross'] = $total_price_gross;

        return $this;
    }

    /**
     * Gets total_price_gross_deducted
     *
     * @return float
     */
    public function getTotalPriceGrossDeducted()
    {
        return $this->container['total_price_gross_deducted'];
    }

    /**
     * Sets total_price_gross_deducted
     *
     * @param float $total_price_gross_deducted Total gross price after applied deductions.
     *
     * @return $this
     */
    public function setTotalPriceGrossDeducted($total_price_gross_deducted)
    {
        $this->container['total_price_gross_deducted'] = $total_price_gross_deducted;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \Swagger\Client\Model\PriceTypeDto
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \Swagger\Client\Model\PriceTypeDto $price_type Indicates the PriceType of this ElementContainerBase, whether it should factor into total costs or not.
     *
     * @return $this
     */
    public function setPriceType($price_type)
    {
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets bidder
     *
     * @return \Swagger\Client\Model\PartyInformationDto
     */
    public function getBidder()
    {
        return $this->container['bidder'];
    }

    /**
     * Sets bidder
     *
     * @param \Swagger\Client\Model\PartyInformationDto $bidder Information about the bidder.
     *
     * @return $this
     */
    public function setBidder($bidder)
    {
        $this->container['bidder'] = $bidder;

        return $this;
    }

    /**
     * Gets bidder_discriminator
     *
     * @return string
     */
    public function getBidderDiscriminator()
    {
        return $this->container['bidder_discriminator'];
    }

    /**
     * Sets bidder_discriminator
     *
     * @param string $bidder_discriminator This discriminator is used to identify different bidders in a project. It is different from the Identifier property in the Bidder in that the BidderDiscriminator is intended to be a numerical identifier within a project, while the Identifier does uniquely identify a bidder in the system independent of a specific project. This property should map to \"Bieternummer\" or \"BidderNo\" in GAEB.
     *
     * @return $this
     */
    public function setBidderDiscriminator($bidder_discriminator)
    {
        $this->container['bidder_discriminator'] = $bidder_discriminator;

        return $this;
    }

    /**
     * Gets gaeb_xml_id
     *
     * @return string
     */
    public function getGaebXmlId()
    {
        return $this->container['gaeb_xml_id'];
    }

    /**
     * Sets gaeb_xml_id
     *
     * @param string $gaeb_xml_id This is used to store the GAEB XML Id within this ServiceSpecification. This data is not used for any calculations or evaluations but only for GAEB serialization and deserialization.
     *
     * @return $this
     */
    public function setGaebXmlId($gaeb_xml_id)
    {
        $this->container['gaeb_xml_id'] = $gaeb_xml_id;

        return $this;
    }

    /**
     * Gets project_information
     *
     * @return \Swagger\Client\Model\ProjectInformationDto
     */
    public function getProjectInformation()
    {
        return $this->container['project_information'];
    }

    /**
     * Sets project_information
     *
     * @param \Swagger\Client\Model\ProjectInformationDto $project_information The ProjectInformation used within the Project in which this ElementContainerBase is contained. This is reference equal to the ProjectInformation used in the parent project.
     *
     * @return $this
     */
    public function setProjectInformation($project_information)
    {
        $this->container['project_information'] = $project_information;

        return $this;
    }

    /**
     * Gets exchange_phase
     *
     * @return \Swagger\Client\Model\ExchangePhaseDto
     */
    public function getExchangePhase()
    {
        return $this->container['exchange_phase'];
    }

    /**
     * Sets exchange_phase
     *
     * @param \Swagger\Client\Model\ExchangePhaseDto $exchange_phase This service specifications exchange phase, i.e. the current status in the project it is intended to be used (such as request for offer, offer, awarding...).
     *
     * @return $this
     */
    public function setExchangePhase($exchange_phase)
    {
        $this->container['exchange_phase'] = $exchange_phase;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \Swagger\Client\Model\OriginDto
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \Swagger\Client\Model\OriginDto $origin This indicates where the service specification originates, i.e. from an exchange file format or self created.
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Creation date of this ServiceSpecification.
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets offer_by_date
     *
     * @return \DateTime
     */
    public function getOfferByDate()
    {
        return $this->container['offer_by_date'];
    }

    /**
     * Sets offer_by_date
     *
     * @param \DateTime $offer_by_date Date indicating until when an offer has to be submitted. In German, this is often called the \"Eröffnungstermin\"
     *
     * @return $this
     */
    public function setOfferByDate($offer_by_date)
    {
        $this->container['offer_by_date'] = $offer_by_date;

        return $this;
    }

    /**
     * Gets decision_date
     *
     * @return \DateTime
     */
    public function getDecisionDate()
    {
        return $this->container['decision_date'];
    }

    /**
     * Sets decision_date
     *
     * @param \DateTime $decision_date Date indicating by when the buyer will select a contractor.
     *
     * @return $this
     */
    public function setDecisionDate($decision_date)
    {
        $this->container['decision_date'] = $decision_date;

        return $this;
    }

    /**
     * Gets submission_location
     *
     * @return string
     */
    public function getSubmissionLocation()
    {
        return $this->container['submission_location'];
    }

    /**
     * Sets submission_location
     *
     * @param string $submission_location String indicating where the physical submission of the offer is taking place.
     *
     * @return $this
     */
    public function setSubmissionLocation($submission_location)
    {
        $this->container['submission_location'] = $submission_location;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of this ServiceSpecification.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this ServiceSpecification.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price_information
     *
     * @return \Swagger\Client\Model\PriceInformationDto
     */
    public function getPriceInformation()
    {
        return $this->container['price_information'];
    }

    /**
     * Sets price_information
     *
     * @param \Swagger\Client\Model\PriceInformationDto $price_information This PriceInformation contains global data for the ServiceSpecification. When inside a Project, do not set this property manually.
     *
     * @return $this
     */
    public function setPriceInformation($price_information)
    {
        $this->container['price_information'] = $price_information;

        return $this;
    }

    /**
     * Gets project_catalogues
     *
     * @return \Swagger\Client\Model\CatalogueDto[]
     */
    public function getProjectCatalogues()
    {
        return $this->container['project_catalogues'];
    }

    /**
     * Sets project_catalogues
     *
     * @param \Swagger\Client\Model\CatalogueDto[] $project_catalogues These are Catalogues that are used within this ServiceSpecification. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments.
     *
     * @return $this
     */
    public function setProjectCatalogues($project_catalogues)
    {
        $this->container['project_catalogues'] = $project_catalogues;

        return $this;
    }

    /**
     * Gets planned_execution_start
     *
     * @return \DateTime
     */
    public function getPlannedExecutionStart()
    {
        return $this->container['planned_execution_start'];
    }

    /**
     * Sets planned_execution_start
     *
     * @param \DateTime $planned_execution_start The date when the execution of the services is scheduled to start
     *
     * @return $this
     */
    public function setPlannedExecutionStart($planned_execution_start)
    {
        $this->container['planned_execution_start'] = $planned_execution_start;

        return $this;
    }

    /**
     * Gets planned_execution_end
     *
     * @return \DateTime
     */
    public function getPlannedExecutionEnd()
    {
        return $this->container['planned_execution_end'];
    }

    /**
     * Sets planned_execution_end
     *
     * @param \DateTime $planned_execution_end The date then the execution of the services is scheduled to be finished
     *
     * @return $this
     */
    public function setPlannedExecutionEnd($planned_execution_end)
    {
        $this->container['planned_execution_end'] = $planned_execution_end;

        return $this;
    }

    /**
     * Gets contract_date
     *
     * @return \DateTime
     */
    public function getContractDate()
    {
        return $this->container['contract_date'];
    }

    /**
     * Sets contract_date
     *
     * @param \DateTime $contract_date The date on which the contract has been awarded. This matches \"Auftragsdatum\" in GAEB
     *
     * @return $this
     */
    public function setContractDate($contract_date)
    {
        $this->container['contract_date'] = $contract_date;

        return $this;
    }

    /**
     * Gets contract_identifier
     *
     * @return string
     */
    public function getContractIdentifier()
    {
        return $this->container['contract_identifier'];
    }

    /**
     * Sets contract_identifier
     *
     * @param string $contract_identifier This value can be used to indicate the number or identifier of the contract. It matches \"Auftragsnummer\" in GAEB
     *
     * @return $this
     */
    public function setContractIdentifier($contract_identifier)
    {
        $this->container['contract_identifier'] = $contract_identifier;

        return $this;
    }

    /**
     * Gets warranty_duration
     *
     * @return \Swagger\Client\Model\WarrantyDurationDto
     */
    public function getWarrantyDuration()
    {
        return $this->container['warranty_duration'];
    }

    /**
     * Sets warranty_duration
     *
     * @param \Swagger\Client\Model\WarrantyDurationDto $warranty_duration This indicates how long the warranty period is for this ServiceSpecification
     *
     * @return $this
     */
    public function setWarrantyDuration($warranty_duration)
    {
        $this->container['warranty_duration'] = $warranty_duration;

        return $this;
    }

    /**
     * Gets warranty_end
     *
     * @return \DateTime
     */
    public function getWarrantyEnd()
    {
        return $this->container['warranty_end'];
    }

    /**
     * Sets warranty_end
     *
     * @param \DateTime $warranty_end The date on which the warranty period ends
     *
     * @return $this
     */
    public function setWarrantyEnd($warranty_end)
    {
        $this->container['warranty_end'] = $warranty_end;

        return $this;
    }

    /**
     * Gets approval_date
     *
     * @return \DateTime
     */
    public function getApprovalDate()
    {
        return $this->container['approval_date'];
    }

    /**
     * Sets approval_date
     *
     * @param \DateTime $approval_date The date on which the services rendered by the bidder are scheduled to be approved by the buyer
     *
     * @return $this
     */
    public function setApprovalDate($approval_date)
    {
        $this->container['approval_date'] = $approval_date;

        return $this;
    }

    /**
     * Gets type_of_approval
     *
     * @return string
     */
    public function getTypeOfApproval()
    {
        return $this->container['type_of_approval'];
    }

    /**
     * Sets type_of_approval
     *
     * @param string $type_of_approval This should specify how the approval is performed by the buyer. This matches \"AcceptType\" in GAEB
     *
     * @return $this
     */
    public function setTypeOfApproval($type_of_approval)
    {
        $this->container['type_of_approval'] = $type_of_approval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


