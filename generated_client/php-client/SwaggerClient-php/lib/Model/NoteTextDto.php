<?php
/**
 * NoteTextDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.4.0
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * NoteTextDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NoteTextDto extends IElementDto 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NoteTextDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_opening_text' => 'bool',
        'is_closing_text' => 'bool',
        'short_text' => 'string',
        'addition_type' => '\Swagger\Client\Model\AdditionTypeDto',
        'long_text' => 'string',
        'html_long_text' => 'string',
        'element_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_opening_text' => null,
        'is_closing_text' => null,
        'short_text' => null,
        'addition_type' => null,
        'long_text' => null,
        'html_long_text' => null,
        'element_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_opening_text' => 'isOpeningText',
        'is_closing_text' => 'isClosingText',
        'short_text' => 'shortText',
        'addition_type' => 'additionType',
        'long_text' => 'longText',
        'html_long_text' => 'htmlLongText',
        'element_type' => 'elementType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_opening_text' => 'setIsOpeningText',
        'is_closing_text' => 'setIsClosingText',
        'short_text' => 'setShortText',
        'addition_type' => 'setAdditionType',
        'long_text' => 'setLongText',
        'html_long_text' => 'setHtmlLongText',
        'element_type' => 'setElementType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_opening_text' => 'getIsOpeningText',
        'is_closing_text' => 'getIsClosingText',
        'short_text' => 'getShortText',
        'addition_type' => 'getAdditionType',
        'long_text' => 'getLongText',
        'html_long_text' => 'getHtmlLongText',
        'element_type' => 'getElementType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['is_opening_text'] = isset($data['is_opening_text']) ? $data['is_opening_text'] : null;
        $this->container['is_closing_text'] = isset($data['is_closing_text']) ? $data['is_closing_text'] : null;
        $this->container['short_text'] = isset($data['short_text']) ? $data['short_text'] : null;
        $this->container['addition_type'] = isset($data['addition_type']) ? $data['addition_type'] : null;
        $this->container['long_text'] = isset($data['long_text']) ? $data['long_text'] : null;
        $this->container['html_long_text'] = isset($data['html_long_text']) ? $data['html_long_text'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['is_opening_text'] === null) {
            $invalidProperties[] = "'is_opening_text' can't be null";
        }
        if ($this->container['is_closing_text'] === null) {
            $invalidProperties[] = "'is_closing_text' can't be null";
        }
        if ($this->container['addition_type'] === null) {
            $invalidProperties[] = "'addition_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_opening_text
     *
     * @return bool
     */
    public function getIsOpeningText()
    {
        return $this->container['is_opening_text'];
    }

    /**
     * Sets is_opening_text
     *
     * @param bool $is_opening_text is_opening_text
     *
     * @return $this
     */
    public function setIsOpeningText($is_opening_text)
    {
        $this->container['is_opening_text'] = $is_opening_text;

        return $this;
    }

    /**
     * Gets is_closing_text
     *
     * @return bool
     */
    public function getIsClosingText()
    {
        return $this->container['is_closing_text'];
    }

    /**
     * Sets is_closing_text
     *
     * @param bool $is_closing_text is_closing_text
     *
     * @return $this
     */
    public function setIsClosingText($is_closing_text)
    {
        $this->container['is_closing_text'] = $is_closing_text;

        return $this;
    }

    /**
     * Gets short_text
     *
     * @return string
     */
    public function getShortText()
    {
        return $this->container['short_text'];
    }

    /**
     * Sets short_text
     *
     * @param string $short_text short_text
     *
     * @return $this
     */
    public function setShortText($short_text)
    {
        $this->container['short_text'] = $short_text;

        return $this;
    }

    /**
     * Gets addition_type
     *
     * @return \Swagger\Client\Model\AdditionTypeDto
     */
    public function getAdditionType()
    {
        return $this->container['addition_type'];
    }

    /**
     * Sets addition_type
     *
     * @param \Swagger\Client\Model\AdditionTypeDto $addition_type addition_type
     *
     * @return $this
     */
    public function setAdditionType($addition_type)
    {
        $this->container['addition_type'] = $addition_type;

        return $this;
    }

    /**
     * Gets long_text
     *
     * @return string
     */
    public function getLongText()
    {
        return $this->container['long_text'];
    }

    /**
     * Sets long_text
     *
     * @param string $long_text long_text
     *
     * @return $this
     */
    public function setLongText($long_text)
    {
        $this->container['long_text'] = $long_text;

        return $this;
    }

    /**
     * Gets html_long_text
     *
     * @return string
     */
    public function getHtmlLongText()
    {
        return $this->container['html_long_text'];
    }

    /**
     * Sets html_long_text
     *
     * @param string $html_long_text html_long_text
     *
     * @return $this
     */
    public function setHtmlLongText($html_long_text)
    {
        $this->container['html_long_text'] = $html_long_text;

        return $this;
    }

    /**
     * Gets element_type
     *
     * @return string
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     *
     * @param string $element_type element_type
     *
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


